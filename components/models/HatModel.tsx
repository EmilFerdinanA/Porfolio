/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
"use client";
import React, { RefObject, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    [key: string]: THREE.Mesh & {
      geometry: THREE.BufferGeometry;
      material: THREE.Material | THREE.Material[];
    };
  };
  materials: {
    [key: string]: THREE.Material;
  };
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "models/hat-transformed.glb"
  ) as GLTFResult;

  const modelRef = useRef<THREE.Group>();

  useFrame((state, delta, xrFrame) => {
    if (modelRef.current) {
      modelRef.current.rotation.y += 0.007;
    }
  });

  return (
    <group
      {...props}
      dispose={null}
      ref={modelRef as RefObject<THREE.Group>}
      scale={[1.8, 1.8, 1.8]}
      rotation={[0.4, -1, 0]}
      position={[0, 0, 0]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_2.geometry}
        material={materials.initialShadingGroup}
        position={[0, -3.867, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload("models/hat-transformed.glb");
